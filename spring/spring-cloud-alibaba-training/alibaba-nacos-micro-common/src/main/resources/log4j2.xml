<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration status="warn" monitorInterval="30">
  <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
  <!-- Properties定义一些属性，下面可以引用 -->
  <Properties>
    <Property name="APP" value="common"/>
    <!-- 控制台日志的输出格式 -->
    <Property name="LOG_PATTERN"
              value="%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{${sys:%pid}}{magenta}%clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n%wEx"/>

    <!-- 日志在工程中的输出位置 -->
    <Property name="LOG_FILE" value="./logs"/>

    <!-- 日志文件拆分大小 -->
    <Property name="SPLIT_SIZE" value="30MB"/>
  </Properties>

  <!-- ===================================================================== -->
  <!--					       appender 配置						                             -->
  <!-- ===================================================================== -->
  <Appenders>
    <!-- Console 输出设置 -->
    <Console name="console.appender" target="SYSTEM_OUT" follow="true">
      <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
      <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
      <PatternLayout charset="UTF-8" pattern="${LOG_PATTERN}"/>
    </Console>

    <!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
    <RollingRandomAccessFile name="infoLog" fileName="${LOG_FILE}/${APP}-info.log" immediateFlush="false"
                             filePattern="${LOG_FILE}/$${date:yyyy-MM}/${App}-info-%d{MM-dd-yyyy}-%i.log.gz"
                             append="true">
      <PatternLayout pattern="${LOG_PATTERN}"/>
      <Policies>
        <!-- 设置策略：interval="6"代表6个小时生成一个文件 -->
        <TimeBasedTriggeringPolicy interval="6" modulate="true"/>
      </Policies>
      <Filters>
        <!-- warn和warn以上的级别拒绝（DENY） -->
        <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
        <!-- info及info以上的级别接受 -->
        <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
      </Filters>
      <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->
      <DefaultRolloverStrategy max="50"/>
    </RollingRandomAccessFile>

    <!-- 以下这个是按天生成error级别的 日志文件 -->
    <RollingRandomAccessFile name="errorLog" fileName="${LOG_FILE}/${APP}-error.log" immediateFlush="false"
                             filePattern="${LOG_FILE}/$${date:yyyy-MM}/${App}-error-%d{MM-dd-yyyy}-%i.log.gz"
                             append="false">
      <PatternLayout pattern="${LOG_PATTERN}"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="24" modulate="true"/>
        <SizeBasedTriggeringPolicy size="${SPLIT_SIZE}"/>
      </Policies>
      <Filters>
        <!-- 只记录error级别信息 -->
        <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
      </Filters>
      <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->
      <DefaultRolloverStrategy max="50"/>
    </RollingRandomAccessFile>
  </Appenders>

  <!-- ===================================================================== -->
  <!--					       logger 配置								                           -->
  <!-- ===================================================================== -->
  <Loggers>
    <!--若是additivity设为false，则子Logger 只会在自己的appender里输出，而不会在父Logger的appender里输出-->
    <Root level="all" additivity="true">
      <AppenderRef ref="console.appender"/>
      <AppenderRef ref="infoLog"/>
      <AppenderRef ref="errorLog"/>
    </Root>
    <!--第三方的软件日志级别 -->
    <logger name="org.springframework" level="info" additivity="true"/>
  </Loggers>
</Configuration>
<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
    configuration 子节点为 appender、logger、root
-->
<configuration>
  <include
          resource="org/springframework/boot/logging/logback/defaults.xml"/>

  <!--用于区分不同应用程序的记录-->
  <contextName>spring-boot-cache</contextName>

  <!-- 日志根目录 -->
  <springProperty scope="context" name="LOG_HOME"
                  source="logging.path"/>

  <!-- 日志在工程中的输出位置 -->
  <property name="LOG_FILE" value="${LOG_HOME}"/>

  <!-- 彩色日志 -->
  <!-- 彩色日志依赖的渲染类 -->
  <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
  <conversionRule conversionWord="wex"
                  converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
  <conversionRule conversionWord="wEx"
                  converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

  <!-- 日志输出样式 -->
  <property name="LOG_PATTERN"
            value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

  <!-- 控制台输出 -->
  <appender name="console"
            class="ch.qos.logback.core.ConsoleAppender">
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>INFO</level>
    </filter>
    <!-- 日志输出编码 -->
    <encoder>
      <pattern>${LOG_PATTERN}</pattern>
      <charset>utf8</charset>
    </encoder>
  </appender>

  <!-- 按照每天生成日志文件 -->
  <appender name="file"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
    <rollingPolicy
            class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!--日志文件输出的文件名 -->
      <FileNamePattern>${LOG_HOME}/console.%d{yyyy-MM-dd}.log</FileNamePattern>
      <!--日志文件保留天数 -->
      <MaxHistory>30</MaxHistory>
      <!--所有的日志文件最大20G，超过就会删除旧的日志-->
      <totalSizeCap>20GB</totalSizeCap>
    </rollingPolicy>
    <encoder
            class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <charset>UTF-8</charset>
      <pattern>${LOG_PATTERN}</pattern>
    </encoder>
    <!--日志文件最大的大小 -->
    <triggeringPolicy
            class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
      <MaxFileSize>500MB</MaxFileSize>
    </triggeringPolicy>
  </appender>

  <!-- 日志输出级别 -->
  <root level="INFO">
    <appender-ref ref="console"/>
    <!-- <appender-ref ref="file"/>-->
    <!-- <appender-ref ref="logstash" /> -->
  </root>

  <!--
    name:用来指定受此loger约束的某一个包或者具体的某一个类。
    addtivity:是否向上级loger传递打印信息。默认是true。
    因为mybatis打印的sql日志是debug级别的，如果将所有的debug都打印出来会特别乱，
    所以特意指定mybatis的日志为debug，其他的为info
  -->
  <logger name="com.xspace.cache.mapper" level="debug" additivity="false">
    <appender-ref ref="console"/>
  </logger>
</configuration>